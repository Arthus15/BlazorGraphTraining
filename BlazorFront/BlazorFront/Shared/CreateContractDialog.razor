@using Services
@inject MutationService _mutationService

<MatDialog @bind-IsOpen="@Opened">
    <MatDialogTitle>Create new Contract</MatDialogTitle>
    <MatDialogContent>
        <MatTextField @bind-Value="@contractName"></MatTextField>
        <MatSelect @bind-Value="@contractType" Label="Contract Type">
            <MatOptionString Value="Local">Local</MatOptionString>
            <MatOptionString Value="International">International</MatOptionString>
        </MatSelect>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { Opened = false; })">Cancel</MatButton>
        <MatButton OnClick="@Create">Create</MatButton>
    </MatDialogActions>
</MatDialog>

@code {
    [Parameter]
    public bool Opened { get; set; }

    [Parameter]
    public List<BlazorFront.Models.Contract> Contracts { get; set; }

    [Parameter]
    public EventCallback<List<BlazorFront.Models.Contract>> ContractsChanged { get; set; }

    [Parameter]
    public EventCallback<bool> OpenedChanged { get; set; }

    private string contractName = null;
    private string contractType = null;


    private async Task Create()
    {
#if DEBUG
        await Task.Delay(10000);
#endif
        var contract = await _mutationService.CreateContractAsync(new Models.Contract() { Name = contractName, ContractType = contractType });
        Contracts.Add(contract);
        Opened = false;

        await OpenedChanged.InvokeAsync(Opened);
        await ContractsChanged.InvokeAsync(Contracts);
    }
}