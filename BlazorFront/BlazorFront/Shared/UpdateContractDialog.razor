@using Services
@inject MutationService _mutationService

<MatDialog @bind-IsOpen="@Show">
    <MatDialogTitle>Modify Contract</MatDialogTitle>
    <MatDialogContent>        
        <MatTextField @bind-Value="@Contract.Name"></MatTextField>
        <MatSelect @bind-Value="@Contract.ContractType" Label="Contract Type">
            <MatOptionString Value="Local">Local</MatOptionString>
            <MatOptionString Value="International">International</MatOptionString>
        </MatSelect>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@CloseDialog">Cancel</MatButton>
        <MatButton OnClick="@Update">Update</MatButton>
    </MatDialogActions>
</MatDialog>

@code {
    [Parameter]
    public bool Show { get; set; }

    [Parameter]
    public List<BlazorFront.Models.Contract> Contracts { get; set; }

    [Parameter]
    public BlazorFront.Models.Contract Contract { get; set; }

    [Parameter]
    public EventCallback<List<BlazorFront.Models.Contract>> ContractsChanged { get; set; }
    [Parameter]
    public EventCallback<BlazorFront.Models.Contract> ContractChanged { get; set; }

    [Parameter]
    public EventCallback<bool> ShowChanged { get; set; }


    private async Task Update()
    {
#if DEBUG
        await Task.Delay(10000);
#endif        
        var updatedContract = await _mutationService.UpdateContractAsync(Contract);

        var oldContract = Contracts.First(x => x.Id == updatedContract.Id);

        Contracts.Remove(oldContract);
        Contracts.Add(updatedContract);

        Show = false;

        await ShowChanged.InvokeAsync(Show);
        await ContractsChanged.InvokeAsync(Contracts);
    }

    private async Task CloseDialog()
    {
        Show = false;
        await ShowChanged.InvokeAsync(Show);
    }
}